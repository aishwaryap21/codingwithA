#LEETCODE 1347. Minimum Number of Steps to Make Two Strings Anagram
# Problem Description:
# You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.
# Return the minimum number of steps to make t an anagram of s.
# An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.

# Example 1:
# Input: s = "bab", t = "aba"
# Output: 1
# Explanation: Replace the first 'a' in t with b, t = "bba" which is anagram of s.
# Example 2:
# Input: s = "leetcode", t = "practice"
# Output: 5
# Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.
# Example 3:
# Input: s = "anagram", t = "mangaar"
# Output: 0
# Explanation: "anagram" and "mangaar" are anagrams. 

class Solution(object):
    def minSteps(self, s, t):
        count = [0] * 26
        n = len(s)
        i = 0
        while i < n:
            count[ord(s[i]) - ord('a')]+=1  # Adjust the index to be zero-based
            count[ord(t[i]) - ord('a')]-=1  # Adjust the index to be zero-based
            i += 1
        ans = 0
        for i in range(26):
            if count[i] > 0:
                ans += count[i]
        return ans


#TC - O(n)
#SC - O(1)
